---
title: "Analisando a distribuicao"
author: "@BragatteMAS"
format: html
editor: visual
---

```{r}
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, error = FALSE, warning = FALSE, message = FALSE, results = 'asis')
```

```{r}
## remove da memória dados anteriores
rm(list = ls())
```

## Bibliotecas

```{r}
#install.packages("microdatasus")
#library(microdatasus)
```

```{r}
## adiciona as bibliotecas de interesse
pacotes <-
    c(
        "microdatasus", ##dados do SUS
        "janitor", ## manipulação para limpeza dos dados 
        "tidytable", ## manipular dados
        "tidyverse", ##ferramentas
        "rcompanion", ## plotNormalidade
        "skimr", #analise exploratorio
        "ggpubr" #checar distribuição
    )
## regra para se não instalado, instalar
#if(!require(pacotes))lapply(pacotes, install.packages, character.only = FALSE)
lapply(pacotes, require, character.only = TRUE)
```

## Dados - Óbitos no ES

```{r}
## qual novo nome 
mortes <- 
    #selecionando dados do SUS
    fetch_datasus(
    year_start = 2021,
    month_start = 1,
    year_end = 2021,
    month_end = 12,
    uf="ES",
    information_system = "SIM-DO"
)
## ATENÇÃO
mortES <- process_sim(mortes, municipality_data = TRUE)
```

## Testando distribuições

### rcompanion

Usando exemplo da aula `Exemplo de interação entre variáveis no R`

```{r}
rcompanion::plotNormalHistogram(ToothGrowth$len)
rcompanion::plotNormalDensity(ToothGrowth$dose)
```

### skimr

Não tratado vs processado do pacote microdatasus

```{r}
skim(mortES)
```

Ajustar nomes

```{r}
## Renomear as colunas do data frame
## qual novo nome 
mortes <- 
    ## limpar os nomes das colunas dos dados "covid_br"
    clean_names(mortes)
```

Nova tabela exemplo

```{r}
## qual novo nome - mortes com sexo idade raça
mortes_sir <-
    ## qual arquivo original
    mortes |>
    ## quais colunas eu quero
    select.(tipobito,
            dtobito,
            idade,
            sexo,
            racacor,
            estciv,
            esc2010,
            causabas_o,
            codmunres) |>
    ## quais filtros quero aplicar
    filter.(tipobito ==  2,   ## 2 = não fetal
            (!is.na(sexo)),    ## remove NA da coluna Sexo
            (!is.na(idade)),   ## remove NA da coluna Idade
            (!is.na(racacor)) ## remove NA da coluna Racacor
            ) |> 
      ## limpar os dados da coluna idade removendo caracteres não numéricos
      mutate(
        idade = str_replace_all(idade, "\\D+", "") |> 
          as.numeric() |> 
          replace_na(0) |> 
          as.integer()
  )
```

tratado

```{r}
skim(mortes_sir)
```

Porque ainda não conseguimos ver um histograma?

```{r}
skim(data = mortes_sir, sexo,racacor, idade)
```

Ter colunas com classes definidas como númericos é importante

```{r}
skim(iris)
```

Reforçar a importância de estar atento aos tipos de objetos

```{r}
tibble(mortes_sir)
```

### ggpubr

Exemplos de distribuição normal

```{r}
ggqqplot(iris$Sepal.Length)
```

```{r}
ggqqplot(ToothGrowth$len)
```

Nossos dados filtrados e não tratados - aqui dá erro

```{r}
ggqqplot(mortes_sir$racacor)
```

Nossos dados filtrados e tratados o tipo do objeto da coluna (caracter para inteiro)

```{r}
ggqqplot(mortes_sir$idade)
```

Corrigindo o campo idade

```{r}
## substituir a coluna idade existente com as idades corrigidas
mortes_sir$idade <- case_when(
  substr(mortes_sir$idade, 1, 1) == "0" ~ 0, ## idade menor de 1 hora
  substr(mortes_sir$idade, 1, 1) == "1" ~ as.integer(substr(mortes_sir$idade, 2, 3)), ## horas
  substr(mortes_sir$idade, 1, 1) == "2" ~ as.integer(substr(mortes_sir$idade, 2, 3)), ## dias
  substr(mortes_sir$idade, 1, 1) == "3" ~ as.integer(substr(mortes_sir$idade, 2, 3)), ## meses
  substr(mortes_sir$idade, 1, 1) == "4" ~ as.integer(substr(mortes_sir$idade, 2, 3)), ## anos
  substr(mortes_sir$idade, 1, 1) == "5" ~ as.integer(substr(mortes_sir$idade, 2, 3))+100, ## anos (mais de 100 anos)
  TRUE ~ NA_integer_
)
```

```{r}
ggqqplot(mortes_sir$idade)
```
